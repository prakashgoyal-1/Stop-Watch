{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","React","useState","time","setTime","timerOn","setTimerOn","useEffect","interval","setInterval","prevTime","clearInterval","className","id","Math","floor","slice","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mKAgDeA,EA5CH,WACV,MAAwBC,IAAMC,SAAS,GAAvC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BH,IAAMC,UAAS,GAA7C,mBAAOG,EAAP,KAAgBC,EAAhB,KAgBA,OAdAL,IAAMM,WAAU,WACd,IAAIC,EAAW,KAUf,OARIH,EACFG,EAAWC,aAAY,WACrBL,GAAQ,SAACM,GAAD,OAAcA,EAAW,QAChC,IACOL,GACVM,cAAcH,GAGT,kBAAMG,cAAcH,MAC1B,CAACH,IAGF,sBAAKO,UAAU,SAAf,UACE,2CACA,sBAAKC,GAAG,UAAR,UACE,iCAASC,KAAKC,MAAOZ,EAAO,KAAW,IAAvC,OACA,iCAAQW,KAAKC,MAAOZ,EAAO,IAAS,IAApC,OACA,iCAAQW,KAAKC,MAAOZ,EAAO,IAAQ,IAAnC,OACA,gCAAQ,IAAQA,EAAO,GAAM,KAAMa,OAAO,QAG5C,sBAAKH,GAAG,UAAR,WACIR,GAAoB,IAATF,GACX,wBAAQc,QAAS,kBAAMX,GAAW,IAAlC,mBAEDD,GAAW,wBAAQY,QAAS,kBAAMX,GAAW,IAAlC,mBACVD,GAAWF,EAAO,GAClB,wBAAQc,QAAS,kBAAMb,EAAQ,IAA/B,oBAEAC,GAAWF,EAAO,GAClB,wBAAQc,QAAS,kBAAMX,GAAW,IAAlC,2BC7BKY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UAGA,cAAC,EAAD,MAEAC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.33261ef6.chunk.js","sourcesContent":["\r\nimport React from \"react\";\r\nimport './App.css'\r\n\r\nconst App = () => {\r\n  const [time, setTime] = React.useState(0);\r\n  const [timerOn, setTimerOn] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    let interval = null;\r\n\r\n    if (timerOn) {\r\n      interval = setInterval(() => {\r\n        setTime((prevTime) => prevTime + 10);\r\n      }, 10);\r\n    } else if (!timerOn) {\r\n      clearInterval(interval);\r\n    }\r\n\r\n    return () => clearInterval(interval);\r\n  }, [timerOn]);\r\n\r\n  return (\r\n    <div className=\"Timers\">\r\n      <h2>Stopwatch</h2>\r\n      <div id=\"display\">\r\n        <span>{( Math.floor((time / 3600000) % 60)) }:</span>\r\n        <span>{(Math.floor((time / 60000) % 60))}:</span>\r\n        <span>{(Math.floor((time / 1000) % 60))}:</span>\r\n        <span>{(\"0\" + ((time / 10) % 100)).slice(-2)}</span>\r\n      </div>\r\n\r\n      <div id=\"buttons\">\r\n        {!timerOn && time === 0 && (\r\n          <button onClick={() => setTimerOn(true)}>Start</button>\r\n        )}\r\n        {timerOn && <button onClick={() => setTimerOn(false)}>Stop</button>}\r\n        {!timerOn && time > 0 && (\r\n          <button onClick={() => setTime(0)}>Reset</button>\r\n        )}\r\n        {!timerOn && time > 0 && (\r\n          <button onClick={() => setTimerOn(true)}>Resume</button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n// import { useState } from \"react\";\r\n\r\n\r\n// const Counter = () => {\r\n\r\n//   const [count, setCount] = useState(0);\r\n//   let temp = 0;\r\n//   function counterStart (e)  {\r\n//     //   e.preventDefault();\r\n//     temp = setInterval(() => {\r\n//         temp++;\r\n//         console.log(\"setInterval run\");\r\n//         setCount(count+1);\r\n//         console.log(\"onclick function run : \"+temp +\"  times\");\r\n//         if(temp === 10){\r\n//             clearInterval(temp);\r\n//         }   \r\n//     },1000);\r\n// console.log(\"outer the setInterval\");\r\n    \r\n  \r\n  \r\n// //     const temp = setInterval(setCount(count+1),1500);\r\n// // console.log(\"temp is :  \"+temp);\r\n// //     if(count === 10){\r\n// //         clearInterval(temp);\r\n// //     }\r\n//   }\r\n  \r\n//     return(\r\n//         <>\r\n//         <div>this is counter app</div>\r\n//         <div>count is :  {count}</div>\r\n//         <button onClick={counterStart}>click start counter</button>\r\n\r\n        \r\n//         </>\r\n//     )\r\n// }\r\n\r\n// export default Counter;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <b>this is inside index.js</b> */}\n   \n  <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n// web\n"],"sourceRoot":""}